name: HydroServer GCP Cloud Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Enter a deployment environment to use.'
        type: environment
        required: true
      action:
        description: 'Enter the action you want to perform.'
        type: choice
        required: true
        options:
        - Initialize HydroServer Deployment
        - Update HydroServer Deployment
        - Teardown HydroServer Deployment
      release:
        description: 'Enter the HydroServer release tag to use.' 
        type: string
        required: false
        default: 'latest'

permissions:
  contents: write
  id-token: write
  actions: write

jobs:
  check-environment-variables:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env:
      GCP_REGION: ${{ vars.GCP_REGION }}
      GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
      GCP_IDENTITY_PROVIDER: ${{ vars.GCP_IDENTITY_PROVIDER }}
      GCP_SERVICE_ACCOUNT: ${{ vars.GCP_SERVICE_ACCOUNT }}
      TERRAFORM_BUCKET: ${{ vars.TERRAFORM_BUCKET }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    outputs:
      database_url_exists: ${{ steps.check_database_url.outputs.database_url_exists }}
    steps:
      - name: Check Required Environment Variables
        run: |
          echo "Checking required environment variables..."
          required_vars=(GCP_REGION GCP_PROJECT_ID GCP_IDENTITY_PROVIDER GCP_SERVICE_ACCOUNT TERRAFORM_BUCKET)
          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              echo "Error: Environment variable $var is not defined."
              exit 1
            fi
          done
      - name: Check Database URL Secret
        id: check_database_url
        run: |
          if [[ -z "$DATABASE_URL" ]]; then
            echo "::set-output name=database_url_exists::false"
          else
            echo "::set-output name=database_url_exists::true"
          fi

  setup-hydroserver-database:
    needs: check-environment-variables
    if: needs.check-environment-variables.outputs.database_url_exists == 'false' && github.event.inputs.action == 'Initialize HydroServer Deployment'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env: 
      database_url: ${{ secrets.DATABASE_URL }}
    defaults:
      run:
        working-directory: ./terraform/gcp/database
    steps:
      - name: Checkout Ops Repo
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Configure GCP Credentials
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ vars.GCP_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="impersonate_service_account=${{ vars.GCP_SERVICE_ACCOUNT }}" \
          -backend-config="bucket=${{ vars.TERRAFORM_BUCKET }}" \
          -backend-config="prefix=state/hydroserver_database_${{ github.event.inputs.environment }}"
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
          -no-color -input=false \
          -var "instance=${{ github.event.inputs.environment }}" \
          -var "region=${{ vars.GCP_REGION }}" \
          -var "project_id=${{ vars.GCP_PROJECT_ID }}" \
          -var "vpc_name=${{ vars.GCP_VPC_NAME || format('projects/{}/global/networks/default', vars.GCP_PROJECT_ID) }}" \
          -var "label_key=${{ vars.GCP_LABEL_KEY || 'hydroserver-instance' }}" \
          -var "label_value=${{ vars.GCP_LABEL_VALUE || github.event.inputs.environment }}"
        continue-on-error: true
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        run: |
          terraform apply \
          -auto-approve -input=false \
          -var "instance=${{ github.event.inputs.environment }}" \
          -var "region=${{ vars.GCP_REGION }}" \
          -var "project_id=${{ vars.GCP_PROJECT_ID }}" \
          -var "vpc_name=${{ vars.GCP_VPC_NAME || format('projects/{}/global/networks/default', vars.GCP_PROJECT_ID) }}" \
          -var "label_key=${{ vars.GCP_LABEL_KEY || 'hydroserver-instance' }}" \
          -var "label_value=${{ vars.GCP_LABEL_VALUE || github.event.inputs.environment }}"

  link-hydroserver-database:
    needs: check-environment-variables
    if: needs.check-environment-variables.outputs.database_url_exists == 'true' && github.event.inputs.action == 'Initialize HydroServer Deployment'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env: 
      database_url: ${{ secrets.DATABASE_URL }}
    defaults:
      run:
        working-directory: ./terraform/gcp/database/connection
    steps:
      - name: Checkout Ops Repo
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Configure GCP Credentials
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ vars.GCP_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="impersonate_service_account=${{ vars.GCP_SERVICE_ACCOUNT }}" \
          -backend-config="bucket=${{ vars.TERRAFORM_BUCKET }}" \
          -backend-config="prefix=state/hydroserver_database_${{ github.event.inputs.environment }}"
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
          -no-color -input=false \
          -var "instance=${{ github.event.inputs.environment }}" \
          -var "region=${{ vars.GCP_REGION }}" \
          -var "project_id=${{ vars.GCP_PROJECT_ID }}" \
          -var "database_url=${{ secrets.DATABASE_URL }}" \
          -var "label_key=${{ vars.GCP_LABEL_KEY || 'hydroserver-instance' }}" \
          -var "label_value=${{ vars.GCP_LABEL_VALUE || github.event.inputs.environment }}"
        continue-on-error: true
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        run: |
          terraform apply \
          -auto-approve -input=false \
          -var "instance=${{ github.event.inputs.environment }}" \
          -var "region=${{ vars.GCP_REGION }}" \
          -var "project_id=${{ vars.GCP_PROJECT_ID }}" \
          -var "database_url=${{ secrets.DATABASE_URL }}" \
          -var "label_key=${{ vars.GCP_LABEL_KEY || 'hydroserver-instance' }}" \
          -var "label_value=${{ vars.GCP_LABEL_VALUE || github.event.inputs.environment }}"

  setup-hydroserver-services:
    needs: [link-hydroserver-database, setup-hydroserver-database]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    if: always() && (needs.link-hydroserver-database.result == 'success' || needs.setup-hydroserver-database.result == 'success') && github.event.inputs.action == 'Initialize HydroServer Deployment'
    defaults:
      run:
        working-directory: ./terraform/gcp/app
    steps:
      - name: Checkout Ops Repo
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Configure GCP Credentials
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ vars.GCP_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}
      - name: Set up GCP SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="impersonate_service_account=${{ vars.GCP_SERVICE_ACCOUNT }}" \
          -backend-config="bucket=${{ vars.TERRAFORM_BUCKET }}" \
          -backend-config="prefix=state/hydroserver_application_${{ github.event.inputs.environment }}"
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
          -no-color -input=false \
          -target=google_artifact_registry_repository.hydroserver_api_repository \
          -var "instance=${{ github.event.inputs.environment }}" \
          -var "region=${{ vars.GCP_REGION }}" \
          -var "vpc_name=default" \
          -var "project_id=${{ vars.GCP_PROJECT_ID }}" \
          -var "label_key=${{ vars.GCP_LABEL_KEY || 'hydroserver-instance' }}" \
          -var "label_value=${{ vars.GCP_LABEL_VALUE || github.event.inputs.environment }}"
        continue-on-error: true
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        run: |
          terraform apply \
          -auto-approve -input=false \
          -target=google_artifact_registry_repository.hydroserver_api_repository \
          -var "instance=${{ github.event.inputs.environment }}" \
          -var "region=${{ vars.GCP_REGION }}" \
          -var "vpc_name=default" \
          -var "project_id=${{ vars.GCP_PROJECT_ID }}" \
          -var "label_key=${{ vars.GCP_LABEL_KEY || 'hydroserver-instance' }}" \
          -var "label_value=${{ vars.GCP_LABEL_VALUE || github.event.inputs.environment }}"
      - name: Authenticate Docker to Google Artifact Registry
        run: |
          gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev
      - name: Pull image from GHCR
        run: |
          docker pull ghcr.io/hydroserver2/hydroserver-api-services:latest
      - name: Tag image for Artifact Registry
        run: |
          docker tag ghcr.io/hydroserver2/hydroserver-api-services:latest \
          ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ github.event.inputs.environment }}/hydroserver-api-services:latest
      - name: Push image to Google Artifact Registry
        run: |
          docker push ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ github.event.inputs.environment }}/hydroserver-api-services:latest

  deploy-hydroserver-api:
    needs: [check-environment-variables, setup-hydroserver-services]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    if: always() && ((github.event.inputs.action == 'Initialize HydroServer Deployment' && needs.setup-hydroserver-services.result == 'success') || (github.event.inputs.action == 'Update HydroServer Deployment' && needs.check-environment-variables.result == 'success'))
    steps:
      - name: Checkout Ops Repo
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Configure GCP Credentials
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ vars.GCP_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}

  deploy-hydroserver-data-mgmt-app:
    needs: [check-environment-variables, setup-hydroserver-services]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    if: always() && ((github.event.inputs.action == 'Initialize HydroServer Deployment' && needs.setup-hydroserver-services.result == 'success') || (github.event.inputs.action == 'Update HydroServer Deployment' && needs.check-environment-variables.result == 'success'))
    steps:
      - name: Checkout Ops Repo
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Configure GCP Credentials
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ vars.GCP_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}

  teardown-hydroserver-services:
    needs: check-environment-variables
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    if: success() && github.event.inputs.action == 'Teardown HydroServer Deployment'
    defaults:
      run:
        working-directory: ./terraform/gcp/app
    steps:
      - name: Checkout Ops Repo
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Configure GCP Credentials
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ vars.GCP_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="impersonate_service_account=${{ vars.GCP_SERVICE_ACCOUNT }}" \
          -backend-config="bucket=${{ vars.TERRAFORM_BUCKET }}" \
          -backend-config="prefix=state/hydroserver_application_${{ github.event.inputs.environment }}"
      - name: Terraform Plan Destroy
        id: plan_destroy
        run: |
          terraform plan -destroy -no-color -input=false \
          -var instance="${{ github.event.inputs.environment }}" \
          -var "vpc_name=default" \
          -var region="${{ vars.GCP_REGION }}" \
          -var project_id="${{ vars.GCP_PROJECT_ID }}"
        continue-on-error: true
      - name: Terraform Plan Destroy Status
        if: steps.plan_destroy.outcome == 'failure'
        run: exit 1
      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve -input=false \
          -var instance="${{ github.event.inputs.environment }}" \
          -var "vpc_name=default" \
          -var region="${{ vars.GCP_REGION }}" \
          -var project_id="${{ vars.GCP_PROJECT_ID }}"
