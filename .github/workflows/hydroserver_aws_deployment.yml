name: HydroServer AWS Cloud Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Enter a deployment environment to use.'
        type: environment
        required: true
      action:
        description: 'Enter the action you want to perform.'
        type: choice
        required: true
        options:
        - Initialize HydroServer Deployment
        - Update HydroServer Deployment
        - Teardown HydroServer Deployment
      release:
        description: 'Enter the HydroServer release tag to use.' 
        type: string
        required: false
        default: 'latest'

permissions:
  contents: write
  id-token: write
  actions: write

jobs:
  check-environment-variables:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env:
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_IAM_ROLE: ${{ vars.AWS_IAM_ROLE }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      TERRAFORM_BUCKET: ${{ vars.TERRAFORM_BUCKET }}
    steps:
      - name: Check Required Environment Variables
        run: |
          echo "Checking required environment variables..."
          required_vars=(AWS_ACCOUNT_ID AWS_IAM_ROLE AWS_REGION TERRAFORM_BUCKET)
          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              echo "Error: Environment variable $var is not defined."
              exit 1
            fi
          done

  initialize-hydroserver:
    needs: check-environment-variables
    if: github.event.inputs.action == 'Initialize HydroServer Deployment'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    defaults:
      run:
        working-directory: ./terraform/aws
    steps:
      - name: Checkout Ops Repo
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_IAM_ROLE }}
          role-session-name: create-hydroserver-resources
          aws-region: ${{ vars.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="bucket=${{ vars.TERRAFORM_BUCKET }}" \
          -backend-config="region=${{ vars.AWS_REGION }}" \
          -backend-config="key=state/hydroserver_${{ github.event.inputs.environment }}"
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
          -no-color -input=false \
          -var "instance=${{ github.event.inputs.environment }}" \
          -var "region=${{ vars.AWS_REGION }}" \
          -var "database_url=${{ secrets.DATABASE_URL || '' }}" \
          -var "tag_key=${{ vars.AWS_TAG_KEY || 'hydroserver-instance' }}" \
          -var "tag_value=${{ vars.AWS_TAG_VALUE || github.event.inputs.environment }}"
        continue-on-error: true
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply ECR
        run: |
          terraform apply \
          -auto-approve -input=false \
          -target=aws_ecr_repository.api_repository \
          -var "instance=${{ github.event.inputs.environment }}" \
          -var "region=${{ vars.AWS_REGION }}" \
          -var "database_url=${{ secrets.DATABASE_URL || '' }}" \
          -var "tag_key=${{ vars.AWS_TAG_KEY || 'hydroserver-instance' }}" \
          -var "tag_value=${{ vars.AWS_TAG_VALUE || github.event.inputs.environment }}"
      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin "${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com"
      - name: Pull image from GHCR
        run: |
          docker pull ghcr.io/hydroserver2/hydroserver-api-services:latest
      - name: Tag Docker Image for ECR
        run: |
          docker tag ghcr.io/hydroserver2/hydroserver-api-services:latest \
          ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/hydroserver-api-${{ github.event.inputs.environment }}:latest
      - name: Push Docker Image to AWS ECR
        run: |
          docker push ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/hydroserver-api-${{ github.event.inputs.environment }}:latest
      - name: Terraform Apply
        run: |
          terraform apply \
          -auto-approve -input=false \
          -var "instance=${{ github.event.inputs.environment }}" \
          -var "region=${{ vars.AWS_REGION }}" \
          -var "database_url=${{ secrets.DATABASE_URL || '' }}" \
          -var "tag_key=${{ vars.AWS_TAG_KEY || 'hydroserver-instance' }}" \
          -var "tag_value=${{ vars.AWS_TAG_VALUE || github.event.inputs.environment }}"

  deploy-hydroserver-api:
    needs: 
      - check-environment-variables
      - initialize-hydroserver
    if: >
      always() && 
      !contains(needs.*.result, 'failure') &&
      (
        (github.event.inputs.action == 'Initialize HydroServer Deployment' && needs.initialize-hydroserver.result == 'success') ||
        (github.event.inputs.action == 'Update HydroServer Deployment' && needs.check-environment-variables.result == 'success')
      )
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    defaults:
      run:
        working-directory: ./terraform/aws
    steps:
      - name: Checkout Ops Repo
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_IAM_ROLE }}
          role-session-name: create-hydroserver-resources
          aws-region: ${{ vars.AWS_REGION }}
      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin "${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com"
      - name: Pull image from GHCR
        run: |
          docker pull ghcr.io/hydroserver2/hydroserver-api-services:latest
      - name: Tag Docker Image for ECR
        run: |
          docker tag ghcr.io/hydroserver2/hydroserver-api-services:latest \
          ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/hydroserver-api-${{ github.event.inputs.environment }}:latest
      - name: Push Docker Image to AWS ECR
        run: |
          docker push ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/hydroserver-api-${{ github.event.inputs.environment }}:latest
      - name: Update AWS Secrets Manager Values
        run: |
          if [ -n "${{ secrets.DATABASE_URL }}" ]; then
            aws secretsmanager put-secret-value --secret-id "arn:aws:secretsmanager:${{ vars.AWS_REGION }}:${{ vars.AWS_ACCOUNT_ID }}:secret/hydroserver-${{ github.event.inputs.environment }}-database-url" --secret-string "${{ secrets.DATABASE_URL }}"
          fi

          if [ -n "${{ secrets.SMTP_URL }}" ]; then
            aws secretsmanager put-secret-value --secret-id "arn:aws:secretsmanager:${{ vars.AWS_REGION }}:${{ vars.AWS_ACCOUNT_ID }}:secret/hydroserver-${{ github.event.inputs.environment }}-smtp-url" --secret-string "${{ secrets.SMTP_URL }}"
          fi

          if [ -n "${{ secrets.SECRET_KEY }}" ]; then
            aws secretsmanager put-secret-value --secret-id "arn:aws:secretsmanager:${{ vars.AWS_REGION }}:${{ vars.AWS_ACCOUNT_ID }}:secret/hydroserver-${{ github.event.inputs.environment }}-secret-key" --secret-string "${{ secrets.SECRET_KEY }}"
          fi
      - name: Update AWS App Runner Service
        run: |
          APP_RUNNER_SERVICE_NAME="hydroserver-api-${{ github.event.inputs.environment }}"
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE_NAME'].ServiceArn" --output text)
          EXISTING_ENV_VARS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" \
            --query "Service.SourceConfiguration.ImageRepository.ImageConfiguration.RuntimeEnvironmentVariables" --output json)          
          declare -A CURRENT_VARS
          while IFS="=" read -r key value; do
            CURRENT_VARS[$key]=$value
          done < <(echo $EXISTING_ENV_VARS | jq -r 'to_entries | .[] | "\(.key)=\(.value)"')
          [[ -n "${{ vars.PROXY_BASE_URL }}" ]] && CURRENT_VARS["PROXY_BASE_URL"]="${{ vars.PROXY_BASE_URL }}"
          [[ -n "${{ vars.DEBUG }}" ]] && CURRENT_VARS["DEBUG"]="${{ vars.DEBUG }}"
          [[ -n "${{ vars.ACCOUNT_SIGNUP_ENABLED }}" ]] && CURRENT_VARS["ACCOUNT_SIGNUP_ENABLED"]="${{ vars.ACCOUNT_SIGNUP_ENABLED }}"
          [[ -n "${{ vars.ACCOUNT_OWNERSHIP_ENABLED }}" ]] && CURRENT_VARS["ACCOUNT_OWNERSHIP_ENABLED"]="${{ vars.ACCOUNT_OWNERSHIP_ENABLED }}"
          [[ -n "${{ vars.SOCIALACCOUNT_SIGNUP_ONLY }}" ]] && CURRENT_VARS["SOCIALACCOUNT_SIGNUP_ONLY"]="${{ vars.SOCIALACCOUNT_SIGNUP_ONLY }}"
          JSON_ENV_VARS=$(jq -n --argjson env "$(echo '{}' | jq -c 'with_entries(select(.))')" '
            reduce inputs as $item (.; .EnvironmentVariables += [{"Name": $item.key, "Value": $item.value}])
          ' < <(for key in "${!CURRENT_VARS[@]}"; do echo "{\"key\": \"$key\", \"value\": \"${CURRENT_VARS[$key]}\"}"; done))
          echo "$JSON_ENV_VARS" > env-vars.json
          aws apprunner update-service --service-arn "$SERVICE_ARN" \
            --source-configuration "{
              \"AuthenticationConfiguration\": {
                \"AccessRoleArn\": \"arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/AppRunnerECRAccessRole\"
              },
              \"ImageRepository\": {
                \"ImageIdentifier\": \"${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/hydroserver-api-${{ github.event.inputs.environment }}:latest\",
                \"ImageRepositoryType\": \"ECR\"
              },
              \"ImageConfiguration\": {
                \"RuntimeEnvironmentVariables\": $(cat env-vars.json)
              }
            }"

  teardown-hydroserver:
    needs: check-environment-variables
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    if: success() && github.event.inputs.action == 'Teardown HydroServer Deployment'
    defaults:
      run:
        working-directory: ./terraform/aws
    steps:
      - name: Checkout Ops Repo
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_IAM_ROLE }}
          role-session-name: create-hydroserver-resources
          aws-region: ${{ vars.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="bucket=${{ vars.TERRAFORM_BUCKET }}" \
          -backend-config="region=${{ vars.AWS_REGION }}" \
          -backend-config="key=state/hydroserver_${{ github.event.inputs.environment }}"
      - name: Terraform Plan Destroy
        id: plan_destroy
        run: |
          terraform plan -destroy -no-color -input=false \
          -var "instance=${{ github.event.inputs.environment }}" \
          -var "region=${{ vars.AWS_REGION }}" \
        continue-on-error: true
      - name: Terraform Plan Destroy Status
        if: steps.plan_destroy.outcome == 'failure'
        run: exit 1
      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve -input=false \
          -var "instance=${{ github.event.inputs.environment }}" \
          -var "region=${{ vars.AWS_REGION }}"
